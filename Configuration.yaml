# For Each of the below listed resources, their properties are described in further depth inside the jinja templates

imports:
- path: jinja-templates/service-account-template.jinja
- path: jinja-templates/network-template.jinja
- path: jinja-templates/firewall-template.jinja
- path: jinja-templates/subnet-template.jinja
- path: jinja-templates/vm-instance-template.jinja
- path: jinja-templates/bucket-storage-template.jinja
- path: jinja-templates/cloudSQL-template.jinja
- path: jinja-templates/internal-TCP-load-balancing-template.jinja
- path: jinja-templates/instance-groups-template.jinja
- path: jinja-templates/health-check-template.jinja

resources:
#IAM service account for accessing and editing cloud storage buckets
#Service account information obtained from - https://github.com/GoogleCloudPlatform/deploymentmanager-samples/tree/master/examples/v2/iam
- name: &BAA_NAME bucket-access-account # Define the bucker access account name as 'BAA' for easier referencing later on
  type: jinja-templates/service-account-template.jinja

#NETWORK - Creates a network to allow communication between company devices across europe 
- name: sme-net
  type: jinja-templates/network-template.jinja

#FIREWALL RULES - Permitt certain traffic and protocols on the network to allow communication between devices and enables engineers to access the network and compute machines
# All of the below rules have saved name references to allow for instances to more easily reference the tags
- name: &HTTP sme-net-allow-http-https # Allows for internet traffic across the network allowing engineers to access network via internet connection
  type: jinja-templates/firewall-template.jinja
  properties:
   ports: ["80", "443"]

- name: &SSH sme-net-allow-ssh # Allows a route for remoting into the network virtual machines - SSH provides fast data transfer
  type: jinja-templates/firewall-template.jinja
  properties:
   ports: ["22"]

- name: &RDP sme-net-allow-rdp # Allows another route for remoting into networks virtual machines - RDP provides a easier to use grpahical interface
  type: jinja-templates/firewall-template.jinja
  properties:
   ports: ["3389"]

- name: &MYSQL sme-net-allow-mysql # Allows connection with MySQL client which stores a large bulk of the smart motorways data
  type: jinja-templates/firewall-template.jinja
  properties:
   ports: ["3306"]

- name: &HEALTH sme-net-allow-health-check # Allows a health check resources to be configured, permitting load balancing which will help with the uptime of the VMs
  type: jinja-templates/firewall-template.jinja
  properties:
    sourceRanges: ["130.211.0.0/22", "35.191.0.0/16"]
    ports: ["80"]

- name: &INTERNAL sme-net-allow-internal # Allows communicaion between devices on the network in the three regional subnets
  type: jinja-templates/firewall-template.jinja
  properties:
    sourceRanges: ["172.16.0.0/12", "192.16.0.0/16","10.10.0.0/16"]
    ports: ["0-65535"]
    multiProtocols: ["TCP", "UDP", "ICMP"]

#SUBNETS - Group devices in a region under a subnetwork for easier managment, failover and efficieny 
# Three subnets created, UK, EU Central and EU north
# I have chosen these three regions to ensure coverage across all of the UK and as much of the EU as possible, permitting company growth and expansion
- name: uk-sme-subnet # UK subnet
  type: jinja-templates/subnet-template.jinja
  properties:
   ipCidrRange: 172.16.0.0/12
   region: &UK europe-west2 # Define the europe-west2 region (london) as 'UK' for easier referencing later on

- name: eu-central-sme-subnet # EU Subnet
  type: jinja-templates/subnet-template.jinja
  properties:
   ipCidrRange: 192.16.0.0/16
   region: &CENTRAL europe-west3 # Define the europe-west3 region (Germany) as 'CENTRAL'

- name: eu-north-sme-subnet # EU North Subnet
  type: jinja-templates/subnet-template.jinja
  properties:
   ipCidrRange: 10.10.0.0/16
   region: &NORTH europe-north1 # Define the europe-north1 region (Finland) as 'NORTH'

#HEALTH CHECKS - Used by load balancers to check the status and health of instance groups. Used for auto healing groups if they come back as un-healthy
#Helps to maintain instance up-time so engineers work can be carried out 24/7
- name: uk-health-check # UK check
  type: jinja-templates/health-check-template.jinja

- name: eu-central-health-check # EU central check
  type: jinja-templates/health-check-template.jinja

- name: eu-north-health-check # EU north check
  type: jinja-templates/health-check-template.jinja

#VM INSTANCES - Handle the computation needs of the business. 3 Templates Created for each region, templates are then used by the instance groups to create the instances
- name: uk-vm
  type: jinja-templates/vm-instance-template.jinja
  properties:
   region: *UK
   zone: europe-west2-b
   subnetwork: $(ref.uk-sme-subnet.selfLink)
   serviceAccountId: *BAA_NAME #Run the VMs as the service account 
   firewallTags: [*HTTP, *INTERNAL, *HEALTH, *RDP, *SSH, *MYSQL] # Referencing the firewall names defined above, En-suring the firewall rules apply to the instance

- name: eu-central-vm
  type: jinja-templates/vm-instance-template.jinja
  properties:
   region: *CENTRAL
   zone: europe-west3-a
   subnetwork: $(ref.eu-central-sme-subnet.selfLink)
   serviceAccountId: *BAA_NAME
   firewallTags: [*HTTP, *INTERNAL, *HEALTH, *RDP, *SSH, *MYSQL] 

- name: eu-north-vm
  type: jinja-templates/vm-instance-template.jinja
  properties:
   zone: europe-north1-a
   region: *NORTH
   subnetwork: $(ref.eu-north-sme-subnet.selfLink)
   serviceAccountId: *BAA_NAME
   firewallTags: [*HTTP, *INTERNAL, *HEALTH, *RDP, *SSH, *MYSQL] 
   
#Create zonal Instance Groups for each region
- name: uk-instance-group
  type: jinja-templates/instance-groups-template.jinja
  properties:
    health-check: $(ref.uk-health-check.selfLink)
    vm-instances: # 2 Instances are created per region (1 in each zone) for redundancy. 
    #Ensures that If one zone has issues there will be another one still active in the other zone
      instance1:
        zone: europe-west2-b
        instanceTemplate: $(ref.uk-vm.selfLink) # Template for creating VMs inside the group
        # By providing a template it also allows for new VMs to be automatically created by the instance group if the VM crashes and the health check returns the status as 'Un-healthy'
      instance2:
        zone: europe-west2-c
        instanceTemplate: $(ref.uk-vm.selfLink)

- name: eu-central-instance-group
  type: jinja-templates/instance-groups-template.jinja
  properties:
    health-check: $(ref.eu-central-health-check.selfLink)
    vm-instances: # Again 2 instances created in central Europe to create multi-regional support. 
    # Enables redundancy and helps with business growth, the infrastructure is already in place for any future growth.
      instance3:
        zone: europe-west3-a
        instanceTemplate: $(ref.eu-central-vm.selfLink)
      instance4:
        zone: europe-west3-b
        instanceTemplate: $(ref.eu-central-vm.selfLink)

- name: eu-north-instance-group
  type: jinja-templates/instance-groups-template.jinja
  properties:
    health-check: $(ref.eu-north-health-check.selfLink)
    vm-instances:
      instance5: # A final instance is created in the less populated northern europe region to provide full coverage and access across europe. 
      # Multiple EU regions mean instances are geographically as close to as many engineers as possible, providing quick and efficient access 
        zone: europe-north1-a
        instanceTemplate: $(ref.eu-north-vm.selfLink)

# Internal TCP/UDP loadbalancing - Helps to scale compute needs by distributing user traffic across multiple instances inside the network. Distributing the load reduces the risk that the VMs will expereince performance issues.
# Instead of one instance group taking up the bulk of the work in the region and running slowly, load balancing ensures both groups work together sharing the data load
# More specifically this load balancing deals with internal TCP communications. TCP is a connection orientated protocol that facilitates the exchange of message between devices over a network.
# By balancing these communications we can ensure one group is not overwhelemed with large numbers of data packets.
# One load balancer is created per region
# TCP reference - https://www.sdxcentral.com/resources/glossary/transmission-control-protocol-tcp/#:~:text=Transmission%20Control%20Protocol%20(TCP)%20%E2%80%93,referred%20to%20as%20TCP%2FIP.
- name: uk-load-balancing
  type: jinja-templates/internal-TCP-load-balancing-template.jinja
  properties:
    region: *UK
    network: $(ref.sme-net.selfLink) # network the load balancer will reside in
    subnetwork: $(ref.uk-sme-subnet.selfLink) # subnetwork the load balancer will reside in
    health-check: $(ref.uk-health-check.selfLink) # previously explained health check to analyse the status of the balancer
    instance-Groups: # the groups the load balancer will apply to
      group1:
       name: $(ref.uk-instance-group-europe-west2-b.name)
       zone: "europe-west2-b"
      group2:
       name: $(ref.uk-instance-group-europe-west2-c.name)
       zone: "europe-west2-c"

- name: eu-central-load-balancing
  type: jinja-templates/internal-TCP-load-balancing-template.jinja
  properties:
    region: *CENTRAL
    health-check: $(ref.eu-central-health-check.selfLink)
    network: $(ref.sme-net.selfLink)
    subnetwork: $(ref.eu-central-sme-subnet.selfLink)
    instance-Groups:
      group1:
       name: $(ref.eu-central-instance-group-europe-west3-a.name)
       zone: "europe-west3-a"
      group2:
       name: $(ref.eu-central-instance-group-europe-west3-b.name)
       zone: "europe-west3-b"

- name: eu-north-load-balancing
  type: jinja-templates/internal-TCP-load-balancing-template.jinja
  properties:
    health-check: $(ref.eu-north-health-check.selfLink)
    region: *NORTH
    network: $(ref.sme-net.selfLink)
    subnetwork: $(ref.eu-north-sme-subnet.selfLink)
    instance-Groups:
      group1:
       name: $(ref.eu-north-instance-group-europe-north1-a.name)
       zone: "europe-north1-a"

#STORAGE
#bucket storage for remote camera data. Video data is unstructred data, more suited to bucket storage
- name: uk-sme-camera-bucket #Regional london bucket
  type: jinja-templates/bucket-storage-template.jinja
  properties:
    location: EUROPE-WEST2
    serviceAccountId: *BAA_NAME #Pass the service account into the buckets to asign permissions

- name: eu-sme-camera-bucket #Multi-regional europe bucket
  type: jinja-templates/bucket-storage-template.jinja
  properties:
    location: EU
    serviceAccountId: *BAA_NAME 

#CloudSQL for storing structured sensor and display data
- name: uk
  type: jinja-templates/cloudSQL-template.jinja #This template creates a cloudSQL instance in the specified region and creates a single database in the instance
  properties:
    region: *UK

- name: eu-central
  type: jinja-templates/cloudSQL-template.jinja
  properties:
    region: *CENTRAL

- name: eu-north
  type: jinja-templates/cloudSQL-template.jinja
  properties:
    region: *NORTH